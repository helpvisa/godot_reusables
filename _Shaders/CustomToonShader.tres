[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;
render_mode ambient_light_disabled;

// variables
uniform vec4 ambientLight: hint_color = vec4(0.1, 0.1, 0.1, 1.);
uniform bool useRimLighting = true;
uniform float rimOffset: hint_range(0., 1.) = 0.8;
uniform float rimMix: hint_range(0., 1.) = 0.25;
uniform sampler2D albedoMap: hint_albedo;
uniform vec4 albedoTint: hint_color = vec4(1.,1.,1.,1.);
uniform sampler2D roughnessMap : hint_white;
uniform float roughScale: hint_range(0., 1.) = 1.;
uniform float specularMix: hint_range(0., 1.) = 0.5;
uniform bool fullRough = false;
uniform sampler2D normalMap : hint_normal;
uniform bool useNormalMap = false;

// random noise function
float rand(vec2 co){
	return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

void fragment() {
	// fresnel term
	float fresnel = sqrt(1. - dot(NORMAL, VIEW));
	
	METALLIC = 0.;
	ALBEDO = texture(albedoMap, UV).rgb * albedoTint.rgb;
	
	// roughness
	if (fullRough) {
		ROUGHNESS = 1.;
	}
	else {
		ROUGHNESS = texture(roughnessMap, UV).r * roughScale;
	}
	
	// normals
	if (useNormalMap) {
		NORMALMAP = texture(normalMap, UV).rgb;
	}
}

void light() {
	// diffuse lighting
	float NdotL = dot(NORMAL, LIGHT);
	float diffuse = NdotL + (ATTENUATION.x - 1.);
	diffuse = smoothstep(0., 0.01, diffuse);
	vec3 coloredDiffuse = diffuse * LIGHT_COLOR * ALBEDO;
	
	// ambient light (cutout, for if you want to manually choose lit + unlit colours)
	//float ambient = (1. - diffuse);
	//vec3 coloredAmbient = ambient * ambientLight.rgb * ALBEDO;
	
	// rim lighting
	float rim = sqrt(1. - dot(NORMAL, VIEW));
	float rimIntensity = rim * NdotL;
	rimIntensity = smoothstep(rimOffset - 0.01, rimOffset + 0.01, rimIntensity);
	vec3 coloredRim = rimIntensity * LIGHT_COLOR * rimMix;
	
	// specular lighting
	vec3 half = normalize(LIGHT + VIEW);
	float NdotH = dot(NORMAL, half);
	float specular = NdotH + (ATTENUATION.x - 1.);
	specular = pow(specular, (1. - ROUGHNESS) * (1. - ROUGHNESS) * 100.);
	specular = smoothstep(0.005, 0.0055, specular) * ((1.-ROUGHNESS) * (1.-ROUGHNESS));
	vec3 coloredSpec = specular * LIGHT_COLOR * specularMix * mix(vec3(1.), ALBEDO, METALLIC);
	
	
	// apply
	// get max between them; allows for multiple lights but one shaded part
	if (useRimLighting) {
	DIFFUSE_LIGHT = ambientLight.rgb * ALBEDO + max(DIFFUSE_LIGHT, coloredDiffuse + coloredRim); // + coloredAmbient);
	}
	else {
		DIFFUSE_LIGHT = ambientLight.rgb * ALBEDO + max(DIFFUSE_LIGHT, coloredDiffuse); // + coloredAmbient);
	} 
	SPECULAR_LIGHT = max(SPECULAR_LIGHT, coloredSpec);
}"
